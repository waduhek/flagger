// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/providerpb/flag_provider.proto

package providerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FlagProvider_GetFlag_FullMethodName = "/providerpb.FlagProvider/GetFlag"
)

// FlagProviderClient is the client API for FlagProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlagProviderClient interface {
	// GetFlag returns the current status of the request flag in the environment.
	GetFlag(ctx context.Context, in *GetFlagRequest, opts ...grpc.CallOption) (*GetFlagResponse, error)
}

type flagProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewFlagProviderClient(cc grpc.ClientConnInterface) FlagProviderClient {
	return &flagProviderClient{cc}
}

func (c *flagProviderClient) GetFlag(ctx context.Context, in *GetFlagRequest, opts ...grpc.CallOption) (*GetFlagResponse, error) {
	out := new(GetFlagResponse)
	err := c.cc.Invoke(ctx, FlagProvider_GetFlag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlagProviderServer is the server API for FlagProvider service.
// All implementations must embed UnimplementedFlagProviderServer
// for forward compatibility
type FlagProviderServer interface {
	// GetFlag returns the current status of the request flag in the environment.
	GetFlag(context.Context, *GetFlagRequest) (*GetFlagResponse, error)
	mustEmbedUnimplementedFlagProviderServer()
}

// UnimplementedFlagProviderServer must be embedded to have forward compatible implementations.
type UnimplementedFlagProviderServer struct {
}

func (UnimplementedFlagProviderServer) GetFlag(context.Context, *GetFlagRequest) (*GetFlagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlag not implemented")
}
func (UnimplementedFlagProviderServer) mustEmbedUnimplementedFlagProviderServer() {}

// UnsafeFlagProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlagProviderServer will
// result in compilation errors.
type UnsafeFlagProviderServer interface {
	mustEmbedUnimplementedFlagProviderServer()
}

func RegisterFlagProviderServer(s grpc.ServiceRegistrar, srv FlagProviderServer) {
	s.RegisterService(&FlagProvider_ServiceDesc, srv)
}

func _FlagProvider_GetFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlagProviderServer).GetFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlagProvider_GetFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlagProviderServer).GetFlag(ctx, req.(*GetFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlagProvider_ServiceDesc is the grpc.ServiceDesc for FlagProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlagProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "providerpb.FlagProvider",
	HandlerType: (*FlagProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFlag",
			Handler:    _FlagProvider_GetFlag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/providerpb/flag_provider.proto",
}
